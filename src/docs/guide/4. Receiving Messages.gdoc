h2. Consuming Messages

h3. Service Listeners

Service listeners are a convenient way to define one handler for JMS messages. The simplest service listener looks like…

{code:java}
class PersonService {
	static exposes = ["jms"]
	def onMessage(msg) {
		// handle message
	}
}
{code}

This will register the @onMessage@ method as a listener for the JMS _topic_ named @«application name».person@ , where «application name» is the @app.name@ key from the @application.properties@ file.

{note}
The return value of onMessage may be sent to a reply queue depending on your configuration. Be careful - due to Groovy's implicit return mechanism, ensure that you return null explicitly if you want nothing to be sent to the reply queue after your onMessage call. For example if you accidentally return a value that cannot be sent to a reply queue, you may have odd side effects like messages never being removed from the queue (due to implicit rollbacks!).
{note}

By default, listener methods receive the payload of the message as extracted by a "SimpleMessageConverter":http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/jms/support/converter/SimpleMessageConverter.html instance. You can use the “messageConverter” configuration parameter of your listener (details below) to either specify a custom converter or to not use a converter at all and receive the "Message":http://java.sun.com/j2ee/1.4/docs/api/javax/jms/Message.html instance instead of the payload.

h4. Configuration

The following configuration parameters can be set as static variables on the service class…

{table}
Property Name | Type | Default | Description
*listenerCount* | Number | 1 | The number of concurrent listeners to spawn to listen for messages
*destination* | String | «app name».«service name» | The named destination of the listener
*listenerMethod* | String | onMessage | The listener method that will handle the messages
*pubSub* | boolean | false | is the destination a topic ( @true@ ) or a queue ( @false@ )
*messageSelector* | String | null | See the “Message Selector” section of http://java.sun.com/j2ee/1.4/docs/api/javax/jms/Message.html 
*durable* | boolean | false | Creates a durable subscription to the topic (redundant if @pubSub = false@ )
*clientId* | String | «app name» | Provides a client identifier for durable subscriptions
*connectionFactory* | String | "jmsConnectionFactory" | The name of the connection factory bean to use to create a connection to the broker
*messageConverter* | String | "" | a @null@ for no message converter, "" to use a "SimpleMessageConverter":http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/jms/support/converter/SimpleMessageConverter.html, otherwise the name of a bean implementing "MessageConverter":http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/jms/support/converter/MessageConverter.html (See "discussion on type conversion":http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/jms/listener/adapter/MessageListenerAdapter.html ) 

{table}

h3. Service Method Listeners

Another avenue is to expose specific methods as message listeners via annotations. This looks like…

{code:java}
import grails.jms.*

class PersonService {
	static exposes = ["jms"]
	
	@Queue
	def addPerson(msg) {
		
	}
	
	@Subscriber
	def somethingHappened(msg) {
		
	}
}
{code}

The above configuration binds the @personService.addPerson()@ method to a queue named @«app name».person.addPerson@ and binds the method @personService.somethingHappened()@ as a listener to the topic named @somethingHappened@ .

Note that you still need to expose the class via ' @ static exposes = \["jms"] @ .

h4. @Queue Configuration

The following configuration parameters can be set as annotation parameters…

{table}
Property Name | Type | Default | Description
*name* | String | «app name».«service name».«method name» | The destination name for the queue
*selector* | String | null | The message selector to apply (See the “Message Selector” section of http://java.sun.com/j2ee/1.4/docs/api/javax/jms/Message.html)
*connectionFactory* | String | "jmsConnectionFactory" | The name of the connection factory bean to use to create a connection to the broker
*messageConverter* | String | "" | a @null@ for no message converter, "" to use a "SimpleMessageConverter":http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/jms/support/converter/SimpleMessageConverter.html, otherwise the name of a bean implementing "MessageConverter":http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/jms/support/converter/MessageConverter.html (See "discussion on type conversion":http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/jms/listener/adapter/MessageListenerAdapter.html ) 
{table}

Example…

{code:java}
import grails.jms.*

class PersonService {
	static exposes = ["jms"]
	
	@Queue(
		name = "myQueue",
		selector = "name IS NOT NULL"
	)
	def addPerson(msg) {
		
	}
}
{code}

h4. @Subscriber Configuration

The following configuration parameters can be set as annotation parameters…

{table}
Property Name | Type | Default | Description
*topic* | String | «method name» | The name of the topic to subscribe to
*selector* | String | null | The message selector to apply (See the “Message Selector” section of [http://java.sun.com/j2ee/1.4/docs/api/javax/jms/Message.html])
*durable* | Boolean | false | Whether or not to create a durable subscription
*connectionFactory* | String | jmsConnectionFactory | The name of the connection factory bean to use to create a connection to the broker
*messageConverter* | String | "" | a @null@ for no message converter, "" to use a "SimpleMessageConverter":http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/jms/support/converter/SimpleMessageConverter.html, otherwise the name of a bean implementing "MessageConverter":http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/jms/support/converter/MessageConverter.html (See "discussion on type conversion":http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/jms/listener/adapter/MessageListenerAdapter.html ) 
{table}

Example…

{code:java}
import grails.jms.*

class PersonService {
	static exposes = ["jms"]
	
	@Subscriber(topic = "aTopic")
	def somethingHappened(msg) {
		
	}
}
{code}